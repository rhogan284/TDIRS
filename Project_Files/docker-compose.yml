services:
  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=ecommerce
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ecommerce"]
      interval: 5s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
      - logger.level=WARN
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

#  logstash:
#    image: docker.elastic.co/logstash/logstash:7.14.0
#    volumes:
#      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
#      - ./logstash/logstash.yaml:/usr/share/logstash/config/logstash.yaml
#      - ./logs:/mnt/logs
#    depends_on:
#      - elasticsearch
#    ports:
#      - "5044:5044"
#    networks:
#      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app-network

  threat-detector:
    build: ./threat_detector
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    volumes:
      - ./logs:/mnt/logs
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7.4-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50

  web:
    build: ./web
    ports:
      - "5002:5000"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/ecommerce
      - REDIS_URL=redis://redis:6379/0
      - REDIS_KEY_PREFIX="threat_responder:"
    networks:
      - app-network
    restart: unless-stopped

  locust:
    build:
      context: ./locust
      dockerfile: Dockerfile.locust
    ports:
      - "8089:8089"
    volumes:
      - ./locust:/mnt/locust
      - ./logs:/mnt/logs
    command: -f /mnt/locust/locustfile.py --headless -u ${NORMAL_USERS:-10} -r ${NORMAL_SPAWN_RATE:-1} --run-time ${RUN_TIME:-1h}
    environment:
      - LOCUST_HOST=http://web:5000
    depends_on:
      kafka:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    networks:
      - app-network

  threat-locust:
    build:
      context: ./locust
      dockerfile: Dockerfile.locust
    volumes:
      - ./locust:/mnt/locust
      - ./logs:/mnt/logs
    command: -f /mnt/locust/threat_locustfile.py --headless -u ${THREAT_USERS:-10} -r ${THREAT_SPAWN_RATE:-1} --run-time ${RUN_TIME:-1h}
    environment:
      - LOCUST_HOST=http://web:5000
    depends_on:
      - web
      - kibana
    networks:
      - app-network

  threat-responder:
    build:
      context: ./threat_detector
      dockerfile: Dockerfile.responder
    volumes:
      - ./logs:/mnt/logs
      - ./threat_detector/responder_config.yaml:/app/responder_config.yaml
    depends_on:
      - threat-detector
      - redis
    environment:
      - REDIS_URL=redis://redis:6379/0
      - REDIS_KEY_PREFIX="threat_responder:"
    networks:
      - app-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-setup:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    command:
      - bash
      - -c
      - |
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic normal-logs
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic threat-logs
    networks:
      - app-network

  flink-jobmanager:
    build: ./flink
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
    networks:
      - app-network

  flink-taskmanager:
    build: ./flink
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
    networks:
      - app-network

  flink-submit:
    build: ./flink
    depends_on:
      - flink-jobmanager
      - flink-taskmanager
      - kafka
      - elasticsearch
    command: flink run -d -p 2 /opt/flink/log_processor.py
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  logs: